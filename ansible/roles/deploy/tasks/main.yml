---
- name: 创建相关目录
  file: name={{ item }} state=directory
  with_items:
  - "{{ bin_dir }}"
  - "{{ ca_dir }}"
  - "{{ base_dir }}"
  - "/etc/kubernetes"

- name: 下载证书工具 cfssl
  include_tasks: cfssl.yml

- name: 下载 kubernetes
  include_tasks: kube.yml

# 注册变量p，根据p的stat信息判断是否已经生成过ca证书，如果没有，下一步生成证书
# 如果已经有ca证书，为了保证整个安装的幂等性，跳过证书生成的步骤
- name: 读取ca证书stat信息
  stat: path="{{ ca_dir }}/ca.pem"
  register: p

- name: 准备CA配置文件
  template: src=ca-config.json.j2 dest={{ ca_dir }}/ca-config.json
  when: p.stat.isreg is not defined

- name: 准备CA签名请求
  template: src=ca-csr.json.j2 dest={{ ca_dir }}/ca-csr.json
  when: p.stat.isreg is not defined

- name: 生成 CA 证书和私钥
  shell: "cd {{ ca_dir }} && {{ bin_dir }}/cfssl gencert -initca ca-csr.json | {{ bin_dir }}/cfssljson -bare ca"
  when: p.stat.isreg is not defined

#----------- 创建kubectl kubeconfig文件: /root/.kube/config
- name: 准备kubectl使用的 admin 证书签名请求
  template: src=admin-csr.json.j2 dest={{ ca_dir }}/admin-csr.json

- name: 创建 admin证书与私钥
  shell: "cd {{ ca_dir }} && {{ bin_dir }}/cfssl gencert \
        -ca={{ ca_dir }}/ca.pem \
        -ca-key={{ ca_dir }}/ca-key.pem \
        -config={{ ca_dir }}/ca-config.json \
        -profile=kubernetes admin-csr.json | {{ bin_dir }}/cfssljson -bare admin"
# 设置集群参数，指定CA证书和apiserver地址
- name: 设置集群参数
  shell: "{{ bin_dir }}/kubectl config set-cluster kubernetes \
        --certificate-authority={{ ca_dir }}/ca.pem \
        --embed-certs=true \
        --server={{ KUBE_APISERVER }}"
# 设置客户端认证参数，指定使用admin证书和私钥
- name: 设置客户端认证参数
  shell: "{{ bin_dir }}/kubectl config set-credentials admin \
        --client-certificate={{ ca_dir }}/admin.pem \
        --embed-certs=true \
        --client-key={{ ca_dir }}/admin-key.pem"
# 设置上下文参数，说明使用cluster集群和用户admin
- name: 设置上下文参数
  shell: "{{ bin_dir }}/kubectl config set-context kubernetes \
        --cluster=kubernetes --user=admin"
# 选择默认上下文
- name: 选择默认上下文
  shell: "{{ bin_dir }}/kubectl config use-context kubernetes"
